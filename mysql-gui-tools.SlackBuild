#!/bin/sh
#
# Slackware build script for MySQL GUI Tools
# Written by Georgi D. Sotirov <gdsotirov@dir.bg>
# This script builds one big package, with all the tools bundled in
#
# Visit SlackPack at http://sotirov-bg.net/slackpack/
#

. ../slack-package.conf

NAME=mysql-gui-tools
VERSION='5.0r14'
BUILD=${BUILD:-1}
ARCH=${ARCH:-i486}

CWD=${CWD:-`pwd`}
TMP=${TMP:-/tmp}

echo_info() {
  echo "*"
  echo "* $1 $2..."
  echo "*"
}
echo_conf()    { echo_info 'Configuring' $1; }
echo_build()   { echo_info 'Building'    $1; }
echo_install() { echo_info 'Installing'  $1; }

if [ ! -e $TMP ]; then
  mkdir -p $TMP # location to build the source
fi

SRC=$TMP/$NAME-$VERSION
if [ -e $SRC -a -d $SRC ]; then
  echo "Source directory '$SRC' already exists! Plaese, move it or remove it."
  exit 1
fi

PKG=$TMP/package-$NAME
if [ -e $PKG -a -d $PKG ]; then
  echo "Package creation directory '$PKG' already exists! Please, move it or remove it."
  exit 2
fi
mkdir -p $PKG

# Extract the sources
cd $TMP
tar -xvf $CWD/$NAME-$VERSION.tar.gz || exit 3
cd $SRC
fix_source

# Apply patches
# For more info on this patch, please visit http://bugs.mysql.com/bug.php?id=22663
patch -p1 -b -z .orig < $CWD/$NAME-$VERSION.diff

# Build all tools by default
SUBPACKS='common administrator query-browser'
for PACK in $SUBPACKS; do
  cd $SRC/$PACK
  case "$PACK" in
    'common')
      echo_info 'Reconfiguring' $PACK
      # This for sure will return error, but it doesn't matter
      autoreconf -i --force

      echo_conf $PACK

      CFLAGS=$SLKCFLAGS \
      CXXFLAGS=$SLKCFLAGS \
      ./configure --build=$ARCH-slackware-linux \
                  --host=$ARCH-slackware-linux \
                  --prefix=/usr \
                  --enable-shared=yes \
                  --enable-static=no
#                 --enable-grt \
#                 --enable-canvas \
#                 --enable-java-modules \
#                 --enable-python-modules || exit 4
# This doesn't compiles
#                 --enable-php-modules
# This is autodetected after patching
#                 --with-lua-includes=/usr/include/lua/5.1 \
#                 --with-lua-libs=/usr/lib/lua/5.1
    ;;
    'query-browser')
      echo_conf $PACK

      CFLAGS=$SLKCFLAGS \
      CXXFLAGS=$SLKCFLAGS \
     ./configure --build=$ARCH-slackware-linux \
                 --host=$ARCH-slackware-linux \
                 --prefix=/usr \
                 --with-gtkhtml=libgtkhtml-2.0 || exit 4
    ;;
    'migration-tool')
      echo_build $PACK

      ./build_mt_script.sh || exit 4
    ;;
    *)
      echo_conf $PACK

      CFLAGS=$SLKCFLAGS \
      CXXFLAGS=$SLKCFLAGS \
      ./configure --build=$ARCH-slackware-linux \
                  --host=$ARCH-slackware-linux \
                  --prefix=/usr || exit 4
  esac


  if [ "$PACK" = "migration-tool" ]; then
    echo_install $PACK

    # Specific Migration tool installation
    MIGVER=$(grep version= $SRC/migration-tool/source/scripts/MigrationScript.lua | sed -e 's/.*"\([^"]*\)".*/\1/')
    MIGSRC=$SRC/migration-tool/mysql-migration-toolkit-script-${MIGVER}

    # a) Install binaries
    install -m 755 $MIGSRC/grtsh                $PKG/usr/bin
    install -m 755 $MIGSRC/run_migration        $PKG/usr/bin
    install -m 755 $MIGSRC/run_migration_simple $PKG/usr/bin

    # b) Install data
    MIGDATA=$PKG/usr/share/mysql-gui/migration-tool
    install -m 755 -d $MIGDATA
    cp -r --preserve=timestamps    $MIGSRC/scripts $MIGDATA/scripts
    cp -r --preserve=timestamps    $MIGSRC/xml     $MIGDATA/xml

    # Only install specific migration tool files in common data
    cp -r -u --preserve=timestamps $MIGSRC/java    $PKG/usr/share/mysql-gui/common/
    cp -r -u --preserve=timestamps $MIGSRC/lua     $PKG/usr/share/mysql-gui/common/
  else
    echo_build $PACK
    make || exit 5

    echo_inst $PACK
    make DESTDIR=$PKG install || exit 6
  fi

  # Create documents
  create_docs $PKG $NAME-$VERSION/$PACK
done

# Install required files README and COPYING
install -m 644 $PKG/usr/doc/$NAME-$VERSION/mysql-administrator/COPYING \
               $PKG/usr/doc/$NAME-$VERSION/COPYING
install -m 644 $CWD/README.in $PKG/usr/doc/$NAME-$VERSION/README

echo_info 'Preparing package' $NAME

# Copy service info
install -m 755 -d $PKG/install
install -m 644 $CWD/slack-desc     $PKG/install/slack-desc
install -m 644 $CWD/slack-required $PKG/install/slack-required
install -m 644 $CWD/slack-suggests $PKG/install/slack-suggests

SBDIR=$PKG/usr/src/slackbuilds/$NAME-$VERSION
install -m 755 -d $SBDIR
install -m 644 $CWD/README.in           $SBDIR/README.in
install -m 644 $CWD/slack-desc          $SBDIR/slack-desc
install -m 644 $CWD/slack-required      $SBDIR/slack-required
install -m 644 $CWD/slack-suggests      $SBDIR/slack-suggests
install -m 644 $CWD/$NAME.SlackBuild    $SBDIR/$NAME.SlackBuild
install -m 644 $CWD/$NAME-$VERSION.diff $SBDIR/$NAME-$VERSION-patch.diff

# Fix permissions
chown -R root.root $PKG
bin_perms $PKG
( cd $PKG; strip_bin; strip_lib )

PKGNAME=$NAME-$VERSION-$ARCH-$BUILD$MYIN
cd $PKG
makepkg -l y -c n $PKG_DIR/$PKGNAME.tgz
cd $PKG_DIR
md5sum $PKGNAME.tgz > $PKGNAME.tgz.md5
cp $CWD/slack-desc $PKGNAME.txt

echo_info 'Cleaning' 'up'

# Clean up (optionally)
if [ "$1" = "--cleanup" ]; then
  rm -rf $SRC
  rm -rf $PKG
fi

echo "All done."


